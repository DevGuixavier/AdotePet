{"ast":null,"code":"import axios from \"axios\";\n\n// Mock API base URL (not used since backend is not running)\nconst API_BASE_URL = \"http://localhost:5000/api\";\n\n// Create axios instance (not used for mocks)\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Request interceptor to add auth token (not used for mocks)\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors (not used for mocks)\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\n\n// Mock data for animals stats\nconst mockStats = {\n  total: 335,\n  available: 327,\n  adopted: 650\n};\n\n// Mock data for animals\nconst mockAnimals = [{\n  id: 1,\n  name: \"Luna\",\n  age: 3,\n  breed: \"Labrador\"\n}, {\n  id: 2,\n  name: \"Max\",\n  age: 2,\n  breed: \"Beagle\",\n  image: \"/assets/images/adocao-cachorro.jpg\"\n}, {\n  id: 3,\n  name: \"Bella\",\n  age: 4,\n  breed: \"Poodle\",\n  image: \"src/assets/images/luna.jpg\"\n}];\n\n// Auth API mocks\nexport const authAPI = {\n  login: credentials => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          user: {\n            id: 1,\n            full_name: \"Usuário Demo\",\n            email: credentials.email,\n            is_admin: false\n          },\n          token: \"fake-token\"\n        }\n      });\n    }, 500);\n  }),\n  register: userData => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          user: {\n            id: 2,\n            full_name: userData.full_name,\n            email: userData.email,\n            is_admin: false\n          },\n          token: \"fake-token\"\n        }\n      });\n    }, 500);\n  }),\n  getCurrentUser: () => new Promise(resolve => {\n    setTimeout(() => {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (user) {\n        resolve({\n          data: {\n            user\n          }\n        });\n      } else {\n        resolve({\n          data: {\n            user: null\n          }\n        });\n      }\n    }, 500);\n  }),\n  refreshToken: () => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          token: \"fake-token\"\n        }\n      });\n    }, 500);\n  })\n};\n\n// Animals API mocks\nexport const animalsAPI = {\n  getAnimals: params => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          animals: mockAnimals\n        }\n      });\n    }, 500);\n  }),\n  getAnimal: id => new Promise(resolve => {\n    setTimeout(() => {\n      const animal = mockAnimals.find(a => a.id === id);\n      resolve({\n        data: animal\n      });\n    }, 500);\n  }),\n  createAnimal: data => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data\n      });\n    }, 500);\n  }),\n  updateAnimal: (id, data) => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data\n      });\n    }, 500);\n  }),\n  deleteAnimal: id => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          success: true\n        }\n      });\n    }, 500);\n  }),\n  uploadImage: (id, formData) => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          success: true\n        }\n      });\n    }, 500);\n  }),\n  getStats: () => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: mockStats\n      });\n    }, 500);\n  })\n};\n\n// Adoptions API mocks\nexport const adoptionsAPI = {\n  getAdoptionRequests: params => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: []\n      });\n    }, 500);\n  }),\n  getAdoptionRequest: id => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: null\n      });\n    }, 500);\n  }),\n  createAdoptionRequest: data => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data\n      });\n    }, 500);\n  }),\n  updateAdoptionRequest: (id, data) => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data\n      });\n    }, 500);\n  }),\n  deleteAdoptionRequest: id => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          success: true\n        }\n      });\n    }, 500);\n  }),\n  getStats: () => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          total: 0\n        }\n      });\n    }, 500);\n  })\n};\n\n// Users API mocks\nexport const usersAPI = {\n  getUsers: params => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: []\n      });\n    }, 500);\n  }),\n  getUser: id => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: null\n      });\n    }, 500);\n  }),\n  updateUser: (id, data) => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data\n      });\n    }, 500);\n  }),\n  deleteUser: id => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          success: true\n        }\n      });\n    }, 500);\n  }),\n  getStats: () => new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: {\n          total: 0\n        }\n      });\n    }, 500);\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","mockStats","total","available","adopted","mockAnimals","id","name","age","breed","image","authAPI","login","credentials","resolve","setTimeout","data","user","full_name","email","is_admin","register","userData","getCurrentUser","JSON","parse","refreshToken","animalsAPI","getAnimals","params","animals","getAnimal","animal","find","a","createAnimal","updateAnimal","deleteAnimal","success","uploadImage","formData","getStats","adoptionsAPI","getAdoptionRequests","getAdoptionRequest","createAdoptionRequest","updateAdoptionRequest","deleteAdoptionRequest","usersAPI","getUsers","getUser","updateUser","deleteUser"],"sources":["C:/Users/Guilherme/Documents/GitHub/AdotePet/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\"\n\n// Mock API base URL (not used since backend is not running)\nconst API_BASE_URL = \"http://localhost:5000/api\"\n\n// Create axios instance (not used for mocks)\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\n// Request interceptor to add auth token (not used for mocks)\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  },\n)\n\n// Response interceptor to handle errors (not used for mocks)\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem(\"token\")\n      localStorage.removeItem(\"user\")\n      window.location.href = \"/login\"\n    }\n    return Promise.reject(error)\n  },\n)\n\n// Mock data for animals stats\nconst mockStats = {\n  total: 335,\n  available: 327,\n  adopted: 650,\n}\n\n// Mock data for animals\nconst mockAnimals = [\n  {\n    id: 1,\n    name: \"Luna\",\n    age: 3,\n    breed: \"Labrador\",\n  },\n  {\n    id: 2,\n    name: \"Max\",\n    age: 2,\n    breed: \"Beagle\",\n    image: \"/assets/images/adocao-cachorro.jpg\",\n  },\n  {\n    id: 3,\n    name: \"Bella\",\n    age: 4,\n    breed: \"Poodle\",\n    image: \"src/assets/images/luna.jpg\",\n  },\n]\n\n// Auth API mocks\nexport const authAPI = {\n  login: (credentials) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { user: { id: 1, full_name: \"Usuário Demo\", email: credentials.email, is_admin: false }, token: \"fake-token\" } })\n      }, 500)\n    }),\n  register: (userData) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { user: { id: 2, full_name: userData.full_name, email: userData.email, is_admin: false }, token: \"fake-token\" } })\n      }, 500)\n    }),\n  getCurrentUser: () =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        const user = JSON.parse(localStorage.getItem(\"user\"))\n        if (user) {\n          resolve({ data: { user } })\n        } else {\n          resolve({ data: { user: null } })\n        }\n      }, 500)\n    }),\n  refreshToken: () =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { token: \"fake-token\" } })\n      }, 500)\n    }),\n}\n\n// Animals API mocks\nexport const animalsAPI = {\n  getAnimals: (params) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { animals: mockAnimals } })\n      }, 500)\n    }),\n  getAnimal: (id) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        const animal = mockAnimals.find((a) => a.id === id)\n        resolve({ data: animal })\n      }, 500)\n    }),\n  createAnimal: (data) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data })\n      }, 500)\n    }),\n  updateAnimal: (id, data) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data })\n      }, 500)\n    }),\n  deleteAnimal: (id) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { success: true } })\n      }, 500)\n    }),\n  uploadImage: (id, formData) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { success: true } })\n      }, 500)\n    }),\n  getStats: () =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: mockStats })\n      }, 500)\n    }),\n}\n\n// Adoptions API mocks\nexport const adoptionsAPI = {\n  getAdoptionRequests: (params) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: [] })\n      }, 500)\n    }),\n  getAdoptionRequest: (id) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: null })\n      }, 500)\n    }),\n  createAdoptionRequest: (data) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data })\n      }, 500)\n    }),\n  updateAdoptionRequest: (id, data) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data })\n      }, 500)\n    }),\n  deleteAdoptionRequest: (id) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { success: true } })\n      }, 500)\n    }),\n  getStats: () =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { total: 0 } })\n      }, 500)\n    }),\n}\n\n// Users API mocks\nexport const usersAPI = {\n  getUsers: (params) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: [] })\n      }, 500)\n    }),\n  getUser: (id) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: null })\n      }, 500)\n    }),\n  updateUser: (id, data) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data })\n      }, 500)\n    }),\n  deleteUser: (id) =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { success: true } })\n      }, 500)\n    }),\n  getStats: () =>\n    new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ data: { total: 0 } })\n      }, 500)\n    }),\n}\n\nexport default api\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}